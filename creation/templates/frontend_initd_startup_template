#!/bin/bash
# condor   This is the glideinWMS frontend startup script
# chkconfig: 35 90 30
# description: Starts and stops a glideinWMS frontend

# Emulate function library.
success() {
	echo -en "\\033[60G[\033[32mOK\033[0m]"
	return 0
}

failure() {
	echo -en "\\033[60G[\033[31mFAILED\033[0m]"
	return 1
}


[ -f /etc/sysconfig/gwms-frontend ] && . /etc/sysconfig/gwms-frontend

# Variables substituted during the file creation (by cvWCreate.py)        
frontend_dir=%(frontend_dir)s
glideinWMS_dir=%(glideinWMS_dir)s
def_frontend_config=%(default_cfg_fpath)s
RPM_INSTALL=%(this_is_rpm_install)s

# RPM_INSTALL can be {''|'no'|'yes'}
# RPM only if RPM_INSTALL = yes 
# '' enables autodetection: RPM installation only if this file path is /etc/init.d/gwms-frontend
SCRIPT_NAME="`readlink -f $0`"
#alt: SCRIPT_NAME="$(cd "$(dirname "$0")" 2>/dev/null && pwd)/$(basename "$0")"
if [ -z "$RPM_INSTALL" ] && [ "$SCRIPT_NAME" = "/etc/init.d/gwms-frontend" ]; then
    RPM_INSTALL=yes
else
    RPM_INSTALL=no
fi
SCRIPT_NAME="`basename $0`"


if [ "$RPM_INSTALL" = "yes" ]; then
    # RPM installation (defaults and binaries)
    LOG_FILE_STARTUP=/var/log/gwms-frontend/frontend/startup.log
    DEFAULT_WRITEBACK=no
    BIN_DIR=/usr/sbin/
    CREATION_DIR=
    FRONTEND_START=${BIN_DIR}glideinFrontend
    FRONTEND_STOP=${BIN_DIR}stopFrontend
    FRONTEND_CHECK=${BIN_DIR}checkFrontend
    # Overriding variables values for RPM installation
    frontend_dir=/var/lib/gwms-frontend/vofrontend
    glideinWMS_dir=$frontend_dir
    def_frontend_config=/etc/gwms-frontend/frontend.xml
else
    # TAR installation  (defaults and binaries)
    LOG_FILE_STARTUP=/dev/null
    DEFAULT_WRITEBACK=yes
    BIN_DIR="$glideinWMS_dir/frontend/"
    CREATION_DIR="$glideinWMS_dir/creation/"
    FRONTEND_START=${BIN_DIR}glideinFrontend.py
    FRONTEND_STOP=${BIN_DIR}stopFrontend.py
    FRONTEND_CHECK=${BIN_DIR}checkFrontend.py
fi

export HOME="/var/lib/gwms-frontend"
# FRONTEND_USER is used when invoking the script as root
FRONTEND_USER=frontend

if [ -s ${def_frontend_config} ]
then
    frontend_name=`grep "^<frontend" $def_frontend_config  | sed 's/ /\n/g' | grep ^frontend_name | awk 'BEGIN { FS = "\""} ; { print $2
 }'`
fi

if [ -z ${frontend_name} ] && [ -d ${frontend_dir} ]
then
    frontend_name=`awk '/^FrontendName /{print $2}' $frontend_dir/frontend.descript 2>/dev/null`
fi

if [ -z ${frontend_name} ]
then
    echo 'Cannot determine frontend name!'
    failure
    exit 1
fi
id_str="$frontend_name"


get_user() {
  # logname returns the original user efater a "su" instead I need the current one
  if [ ! -z "$USER" ]; then
    echo $USER
  else
    logname
  fi
}

# Check that frontend user is the owner of the config file
THIS_USER=`get_user`
THIS_ID=`id -u $THIS_USER`
# should check actually the config file in the working directory
# Double percent %% needed for template substitution
FILE_OWNER=`stat -c%%u "$def_frontend_config"`
if [ $THIS_ID -eq 0 ]; then
    if [ `id -u $FRONTEND_USER` -ne $FILE_OWNER ]; then
        echo "The Frontend user ($FRONTEND_USER) must own the configuration file ($def_frontend_config).
Use the correct user or edit FRONTEND_USER in $0"
        failure
        exit 4
    fi
else
    if [ $THIS_ID -ne $FILE_OWNER ]; then
        echo "The user invoking this script ($THIS_ID) must be root or own the configuration file ($def_frontend_config)"
        failure
        exit 4
    fi
fi

# -s /bin/sh necessary because frontend could have /bin/nologin as default
# BSD system: SU_COMMAND="eval sudo -u "
SU_COMMAND="/bin/su -s /bin/sh"
if [ -x "/sbin/runuser" ]; then
    # For SELinux we need to use 'runuser' not 'su'
    SU_COMMAND="/sbin/runuser -s /bin/sh"      # /sbin/runuser
fi

invoke_as_frontend() {
    # parameters are a string with the command to invoke
    # e.g. "ls -al \"$directory\""
    local user_to_use=$FRONTEND_USER
    local user_id=$(id -u $(get_user))
    if [ $user_id -eq 0 ]; then
        # It's root, change user
        $SU_COMMAND $user_to_use -c "$@"
        #with daemon: daemon --user=$user_to_use "$@" &>/dev/null &
        return $?
    elif [ $user_id = $FILE_OWNER ]; then
        # It's the owner, invoke directly, both su and runuser would ask for password
        eval "$@"
        #with daemon: daemon "$@" &>/dev/null &
        return $?
    else
        # someone else, raise error
        echo "ERROR: you must be the owner of ${def_frontend_config}."
        #return 4
        exit 4
    fi
}

help_usage() {
    if [ "$RPM_INSTALL" = "yes" ]; then
        # upgrade does not make sense for RPM because the RPM upgrade will take care of it
        echo "Usage: $SCRIPT_NAME {start|stop|restart|status|reconfig}"
    else
        echo "Usage: $SCRIPT_NAME {start|stop|restart|status|reconfig|upgrade}
    $SCRIPT_NAME upgrade [NEW_XML_CONFIG_FILE]
    $SCRIPT_NAME reconfig [NEW_XML_CONFIG_FILE] [-fix_rrd] [update_default_cfg] [{yes|no}] 
"
    fi
}

start() {
        echo -n "Starting glideinWMS frontend $id_str: "
        invoke_as_frontend "nice -2 \"${FRONTEND_START}\" \"$frontend_dir\" 2>$LOG_FILE_STARTUP 1>&2 </dev/null &"
        sleep 5
        "$FRONTEND_CHECK" "$frontend_dir"  2>/dev/null 1>&2 </dev/null && success || failure
        RETVAL=$?
        echo
}

stop() {
        echo -n "Shutting down glideinWMS frontend $id_str: "
        invoke_as_frontend "\"${FRONTEND_STOP}\" -f \"$frontend_dir\" 2>/dev/null 1>&2 </dev/null" && success || failure
        RETVAL=$?
        if [ $RETVAL -eq 2 ]; then
            echo -n "Already stopped."
            RETVAL=0
        fi         
        echo
}

restart() {
        stop
        if [ $RETVAL -ne 0 ]; then
            # Waiting 30 sec for the shutdown to complete
            echo "Waiting for the GlideinWMS Frontend to shutdown" 2>&1
            for i in {1..60}; do  # Use seq if a variable is needed: $(seq 1 $END)
                # Returns 0 if running, 1 if not
                "${FRONTEND_CHECK}" "$frontend_dir" >/dev/null 2>&1 </dev/null
                if [ $? -eq 1 ]; then
                    RETVAL=0
                    break
                fi
                sleep 1
                echo -n "."
            done
            echo
            if [ $RETVAL -ne 0 ]; then
                echo "Failed to stop the GlidinWMS Frontend. Please check."
                exit $RETVAL
            else
                echo "Shutdown complete"
            fi
        fi
        start
}

reconfig() {
        # All parameters are passed ($@)
        # The confic file must be the first after reconfig (if any)
        shift
        if [ -f "$1" ]; then
            echo "Using Frontend config file arg: $1"
            cfg_loc=$1
            shift           
        else
            echo "Using default Frontend config file: $def_frontend_config"
            cfg_loc=$def_frontend_config
        fi
        # Set defaults and check if parameters
        update_def_cfg="no"
        writeback=$DEFAULT_WRITEBACK
        fix_rrd=""
        for var in "$@"
        do
            case "$var" in
            yes | no) writeback="$var"
                ;;
            update_default_cfg) update_def_cfg="yes"
                ;;
            "-fix_rrd") fix_rrd="-fix_rrd"
                ;;
            *)  # shift to avoid scanning file: if [ "$cfg_loc" != "$var" ]; then
                echo "Unknown argument passed: $var"
                help_usage
                exit 2
                #fi
                ;;
            esac
        done
        if [ -n "$GLIDEIN_WRITEBACK" ]; then
            writeback="$GLIDEIN_WRITEBACK"
        fi

        "${FRONTEND_CHECK}" "$frontend_dir" >/dev/null 2>&1 </dev/null
        notrun=$?
        if [ $notrun -eq 0 ]; then
            stop
            if [ $RETVAL -ne 0 ] && [ $RETVAL -ne 2 ]; then
                echo "Failed to stop the GlidinWMS Frontend. Please check."
                exit $RETVAL
            fi
        fi
        pushd $frontend_dir 1>/dev/null

        # Defaults of reconfig_frontend (f-flag, v-variable)
        # f   fix_rrd = False
        # v   writeback = 'no'
        # v   update_scripts = 'no'
        # v   update_def_cfg = 'no'
        invoke_as_frontend "\"${CREATION_DIR}reconfig_frontend\" -force_name \"$frontend_name\" -writeback $writeback -xml \"$cfg_loc\" -update_def_cfg \"$update_def_cfg\" $fix_rrd"

        #su -s /bin/bash $FRONTEND_USER -c "reconfig_frontend -force_name \"$frontend_name\" -update_scripts \"no\" -xml $frontend_config"

        RETVAL=$?
        reconfig_failed=$?
        popd 1>/dev/null
        echo -n "Reconfiguring the frontend"
        test $reconfig_failed -eq 0 && success || failure
        echo
        if [ $notrun -eq 0 ]; then
            start
        fi
}
        
upgrade() {
        if [ -f "$1" ]; then
            echo "Using frontend config file arg: $1"
            cfg_loc=$1
        else
            echo "Using default frontend config file: $def_frontend_config"
            cfg_loc=$def_frontend_config
        fi
        "$FRONTEND_CHECK" "$frontend_dir" >/dev/null 2>&1 </dev/null
        notrun=$?
        if [ $notrun -eq 0 ]; then
            stop
            if [ $RETVAL -ne 0 ] && [ $RETVAL -ne 2 ]; then
                echo "Failed to stop the GlidinWMS Frontend. Please check."
                exit $RETVAL
            fi
        fi
        pushd $frontend_dir 1>/dev/null
        invoke_as_frontend "\"${CREATION_DIR}reconfig_frontend\" -force_name \"$frontend_name\" -writeback yes -update_scripts yes -xml \"$cfg_loc\""

        # su -s /bin/bash $FRONTEND_USER -c "reconfig_frontend -force_name \"$frontend_name\" -writeback \"yes\" -update_scripts \"yes\" -xml $frontend_config"

        reconfig_failed=$?
        popd 1>/dev/null
        echo -n "Upgrading the frontend"
        test $reconfig_failed -eq 0 && success || failure
        RETVAL=$?
        echo
        if [ $notrun -eq 0 ]; then
            start
        fi
}


case $1 in
        start)
            start
            ;;
        stop)
            stop
            ;;
        restart)
            restart
            ;;
        status)
            "$FRONTEND_CHECK" "$frontend_dir"
            RETVAL=$?
            #TODO: Should it print something?
            ;;
        force-reload|reconfig)
            reconfig "$@"
            ;;
        upgrade)
            upgrade $2
            ;;
        *)
            help_usage
            exit 3
esac

exit $RETVAL
